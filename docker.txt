++docker run 

docker run hello-world

when docker runs image it runs a filesystem snapshot
there is a default command that is run after container is made

container > kernel > ram/network/cpu + commands like ls, echo and such( these are programs)


override default command
e.g
docker run busybox echo hi there
docker|run|image|override command


++docker ps
docker ps --all

docker run busybox ping google.com
will run continue to ping google until stopped, measures latency?

container lifecycle
creating and running are two different things
dockerrun = docker create + docker start 

docker start is about "default command"
docker start -a container_ref
-a is attach, so any output coming from container will output it to your 

cant do on a exited container b/c cant replace default command
docker start -a 2318239a echo bye there 

deletes stopped containers and stuff, will prompt y/n
docker system prune 

look at output tht has been emitted by the container
docker logs 

docker stopped
hardware singal - SIGTERM(terminate signal) will give container some time to do things and clean itself
has a default timer of 10sec before it changes to docker kill 
e.g ping command does not respond to sigterm b/c it wants to run forever
docker kill 
SIGKILL - means to shut down right now and dont do any additional work 


multi command containers

oddity with redis 
redis-cli

docker exec -it <container_ref> <command>
docker exec -it asdasd redis-cli

docker exec -it 12323ad sh
^^ use shell program to send comamnds to container(differnet shells=bash,powershell,zsh, sh)
most of the time will just use exec sh to poke around but dont use for default command for things like web servers and such


Sec 3
=> => means that buildkit is enabled
disable buildkit in build runs with ; sudo DOCKER_BUILDKIT = 0 docker build .

Dockerfile Flow 
Base image
Commands to install dependecies and additionalprograms
Command to run on container startup

Dockerfile > Docker Client > Docker Server > Usable Image

docker build . 
creates a docker image and shoots out the image id
reference image id can be used for run,create and start   

build process
creates intermediate/temporary layers/containers for each instuction and does a file snapshot of the container 
to create an image that is used to repeat the process for the next instruction. 
docker CACHES these layers in order to make further builds fast 

"if you ever want to make changes to your docker file in the future you want to make those lines 
as down as possible b/c of cache"

tag 

docker build -t <project name or repository>:<tag text here>

docker run -it alpine sh
shell starts up
apk add --update redis ; is ran inside of container
open 2nd terminal
docker ps 
docker commit -c 'CMD ["redis-server"]' <container ref>
^^takes snapshot of container and creates an image 
docker commit is not really common, just use Dockerfile approach

Sec 4 - project
Create NODEjs web app 
Create Dockerfile
build image from Dockerfile
run image as container
connect to web app from browser

Goal 
Create a nodejs web app > wrap it in a docker container > access that web app from browser on local machine 

will make mistakes on purpose that will run into while making projects by myself 
tutorial points out these mistakes and solution for it 


JS
npm install needs a package.json file to find dependecies

must specify 14-alpine version otherwise will see diff errors eg idealTree error when tryinbg to build iamge
^^ e.g
FROM node:14 alpine

COPY ./ ./
COPY <path of file on local machine> <target path in container>
path of file on local machine is relative to build context aka ./ is simpweb/

sec 5
node app - web app
redis - db 

number of visits at web app
can do node app and redis in same container but issue with scaling
will shoot out different values to different users 

solution - 
have different docker containers with web app that will all
connect to redis that will store the visit 

for redis container;docker run redis

how to connect two seperate containers  
docker cli network feature
docker compose
    uses docker-compose.yml 
    automatically connects containers created
although they are connected
in order for comm , we created a host in index.js aka 'redis-server' 
tip: anywhere using connection URL/URI can use name of container and it 
hostname will automatically be resolsved by docker

docker run -d <image>
-d is detached 

start docker compose with services in background; docker-compose up -d
shut down containers started by compose; docker-compose down

const process = ('process')
process.exit(0);
will automatically stop the container b/c code stop running 
exit status codes
0 - we exit and evryting is ok
1,2,3 etc exit b/c something went wrong 

goal - heal container / automatically restart stopped/crashed container

restart policy 
"no" - never attempt to restart if stop/crash
always - if this container stops for any reason always attempt to restart it
on-failure - only restart if container crashes with error code
unless-stopped - always restart unless stopped by developers

"no" is different from no b/c in .yml no is a false boolean rather than the specific restart policy string "no" or 'no'
on-failure doesnt work with exit code 0, change exit code in process.exit() to do this 
make sure to rebuild 

docker compose ps to look at services running
uses current directory .yml file to figure out what containers to look for and then shoots out status

Sec 6 - workflow
development
testing
deployment

Flow
Github Repo 
Feature branch; development branch 
Master Branch; clean working version of code base 

DEVELOP
pull code 
add code
merge request
feature branch 

create pull request; feature branch->master branch
code pushed to ->travisCI
test run
if ok merge PR with master
push code to travisCI
test run
deploy

npx create-react-app frontend

npm run start; development only command, starts up a develop server not for prod
npm run test; run tests
npm run build; builds a prod version of app 

two Dockerfiles
develop
npm run start 
prod
npm run build